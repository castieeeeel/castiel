@precedence {
  binop @left
  and @left
  or @left
}
@top Program {
  Query
}

@skip {
  space
}

commaSep<content> { content ("," content)* }

kw<term> { @specialize[@name={term}]<Identifier, term> }


Query {
    Identifier ( WhereClause | LimitClause | OrderClause | SelectClause | RenderClause )*
}

WhereClause { kw<"where"> Expression }
LimitClause { kw<"limit"> Number }
OrderClause { Order Identifier OrderDirection? }
SelectClause { kw<"select"> commaSep<Identifier> }
RenderClause { kw<"render"> PageRef }

OrderDirection {
 OrderKW
}

Value { Number | String | Bool | Regex | kw<"null"> | List }

Attribute {
  LVal "." Identifier
}

LVal {
  Identifier
| Attribute
}

ParenthesizedExpression { "(" Expression ")" }

LogicalExpression {
Expression !and kw<"and"> Expression
| Expression !or kw<"or"> Expression
}

Expression {
  Value
| LVal
| ParenthesizedExpression
| LogicalExpression 
| BinExpression
}

BinExpression {
  LVal !binop "<" Expression
| LVal !binop "<=" Expression
| LVal !binop "=" Expression
| LVal !binop "!=" Expression
| LVal !binop ">=" Expression
| LVal !binop ">" Expression
| LVal !binop "=~" Expression
| LVal !binop "!=~" Expression
| LVal !binop InKW Expression
}

List { "[" commaSep<Value> "]" }


Bool {
  BooleanKW
}


@tokens {
  space { std.whitespace+ }
  Identifier { (std.asciiLetter | "-" | "_")+ }

  String {
    ("\"" | "“" | "”") ![\"”“]* ("\"" | "“" | "”")
  }
  PageRef {
    "[" "[" ![\]]* "]" "]"
  }
  Order { "order by" }
  Regex { "/" ( ![/\\\n\r] | "\\" _ )* "/"? }

  Number { std.digit+ }

  BooleanKW { "true" | "false" }

  InKW { "in" }

  OrderKW { "asc" | "desc" }

  @precedence { Order, BooleanKW, InKW, OrderKW, Identifier }
}
