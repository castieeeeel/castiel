@precedence { logic @left }

@top Program { Query }

Query {
    Name ( WhereClause | OrderClause  | LimitClause | SelectClause | RenderClause )*
}

commaSep<content> { content ("," content)* }

// Keywords
Where { "where" }
Order { "order" }
By { "by" }
Select { "select" }
Render { "render" }
Limit { "limit" }

WhereClause { Where LogicalExpr }
OrderClause { Order By Name OrderDirection? }
LimitClause { Limit Number }
SelectClause { Select commaSep<Name> }
RenderClause { Render (PageRef | String) }

OrderDirection {
  "desc" | "asc"
}

Value { Number | String | Bool | Regex | Null | List }

LogicalExpr { AndExpr | FilterExpr }

AndExpr { FilterExpr !logic "and" FilterExpr }

FilterExpr {
  Name "<" Value
| Name "<=" Value
| Name "=" Value
| Name "!=" Value
| Name ">=" Value
| Name ">" Value
| Name "=~" Value
| Name "!=~" Value
| Name "in" Value
}

List { "[" commaSep<Value> "]" }

@skip { space }



Bool {
  "true" | "false"
}

Null {
  "null"
}

@tokens {
  space { std.whitespace+ }
  Name { (std.asciiLetter | "-" | "_")+ }
  String {
    ("\"" | "“" | "”") ![\"”“]* ("\"" | "“" | "”")
  }
  PageRef {
    "[" "[" ![\]]* "]" "]"
  }
  Regex { "/" ( ![/\\\n\r] | "\\" _ )* "/"? }

  Number { std.digit+ }
}
